
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000d6a  00000dfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000a0  008000a0  00000e3e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001707  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a7a  00000000  00000000  00002727  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e12  00000000  00000000  000031a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  00003fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064c  00000000  00000000  00004268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000873  00000000  00000000  000048b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00005127  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3a       	cpi	r26, 0xAD	; 173
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4e 02 	call	0x49c	; 0x49c <main>
  8a:	0c 94 b3 06 	jmp	0xd66	; 0xd66 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:

//Functions definitions
void app_init()
{
		//Initialize the LEDs
		error = led_init(PORT_A, 0);	error = led_init(PORT_A, 1);	error = led_init(PORT_A, 2);	//Cars LEDs
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	0e 94 3f 02 	call	0x47e	; 0x47e <led_init>
  9a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 3f 02 	call	0x47e	; 0x47e <led_init>
  a6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 3f 02 	call	0x47e	; 0x47e <led_init>
  b2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
		error = led_init(PORT_B, 0);	error = led_init(PORT_B, 1);	error = led_init(PORT_B, 2);	//Pedestrians LEDs
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 3f 02 	call	0x47e	; 0x47e <led_init>
  be:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
  c2:	61 e0       	ldi	r22, 0x01	; 1
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	0e 94 3f 02 	call	0x47e	; 0x47e <led_init>
  ca:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
  ce:	62 e0       	ldi	r22, 0x02	; 2
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	0e 94 3f 02 	call	0x47e	; 0x47e <led_init>
  d6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
		//Initialize the timer
			//The desired time is 5sec. F=1MHz, slect prescaler=1024 -> T_overflow=256*1.024ms=262.144ms 
			//-> Need 5000ms/262.144ms=19.1 Overflows -> Ceil: need 20 Overflows -> initial value=256-(all_ticks/20)=256-(4882.8/20)=11.86=12
			//Enable timer overflow interrupt
		error = timer_init	(normal, TIMER_INIT_VAL, TIMER_PRESCAL, 1);
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	54 e0       	ldi	r21, 0x04	; 4
  e0:	6c e0       	ldi	r22, 0x0C	; 12
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <timer_init>
  e8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
		//Enable interrupts from INT0
		error = interrupt_en(INT_0,RIS_EDG);
  ec:	63 e0       	ldi	r22, 0x03	; 3
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <interrupt_en>
  f4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
		if (error!=no_err)
  f8:	88 23       	and	r24, r24
  fa:	41 f0       	breq	.+16     	; 0x10c <app_init+0x7a>
		{
			printf("ERROR: could not initialize the application");
  fc:	80 e6       	ldi	r24, 0x60	; 96
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	9f 93       	push	r25
 102:	8f 93       	push	r24
 104:	0e 94 d5 03 	call	0x7aa	; 0x7aa <printf>
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	08 95       	ret

0000010e <app_start>:
		//Start from State S0 (Cars=G - Peds=R).
		//Go to the next state Sx depending on:
			//whether INT0 fires or not
			//OR when 5sec pass
	//Code
	timer_start();
 10e:	0e 94 9e 03 	call	0x73c	; 0x73c <timer_start>
	switch(current_state)
 112:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <current_state>
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	09 f4       	brne	.+2      	; 0x11c <app_start+0xe>
 11a:	96 c0       	rjmp	.+300    	; 0x248 <app_start+0x13a>
 11c:	30 f4       	brcc	.+12     	; 0x12a <app_start+0x1c>
 11e:	88 23       	and	r24, r24
 120:	69 f0       	breq	.+26     	; 0x13c <app_start+0x2e>
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	09 f4       	brne	.+2      	; 0x128 <app_start+0x1a>
 126:	4d c0       	rjmp	.+154    	; 0x1c2 <app_start+0xb4>
 128:	08 95       	ret
 12a:	84 30       	cpi	r24, 0x04	; 4
 12c:	09 f4       	brne	.+2      	; 0x130 <app_start+0x22>
 12e:	09 c1       	rjmp	.+530    	; 0x342 <app_start+0x234>
 130:	08 f4       	brcc	.+2      	; 0x134 <app_start+0x26>
 132:	cc c0       	rjmp	.+408    	; 0x2cc <app_start+0x1be>
 134:	85 30       	cpi	r24, 0x05	; 5
 136:	09 f4       	brne	.+2      	; 0x13a <app_start+0x2c>
 138:	3f c1       	rjmp	.+638    	; 0x3b8 <app_start+0x2aa>
 13a:	08 95       	ret
	{
		case G_R:
			//Change the output (LEDs colors)
			error = led_off	(port_cars_Rled, pin_cars_Rled);
 13c:	62 e0       	ldi	r22, 0x02	; 2
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 144:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_off	(port_cars_Yled, pin_cars_Yled);
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 150:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_on	(port_cars_Gled, pin_cars_Gled);	//Cars GREEN LED is on
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 43 02 	call	0x486	; 0x486 <led_on>
 15c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_on	(port_peds_Rled, pin_peds_Rled);	//Pedestrian RED LED is on
 160:	62 e0       	ldi	r22, 0x02	; 2
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 43 02 	call	0x486	; 0x486 <led_on>
 168:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_off	(port_peds_Yled, pin_peds_Yled);
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 174:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_off	(port_peds_Gled, pin_peds_Gled);
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 180:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			if (error!=no_err)
 184:	88 23       	and	r24, r24
 186:	41 f0       	breq	.+16     	; 0x198 <app_start+0x8a>
			{
				printf("ERROR: app failure");
 188:	8c e8       	ldi	r24, 0x8C	; 140
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	9f 93       	push	r25
 18e:	8f 93       	push	r24
 190:	0e 94 d5 03 	call	0x7aa	; 0x7aa <printf>
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
			}
			//Change application state
			if (butt_pressed)
 198:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <butt_pressed>
 19c:	88 23       	and	r24, r24
 19e:	31 f0       	breq	.+12     	; 0x1ac <app_start+0x9e>
			{
				current_state = Y_YR;
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <current_state>
				butt_pressed = 0;
 1a6:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <butt_pressed>
 1aa:	08 95       	ret
			}
			else if (five_sec_passed)
 1ac:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <five_sec_passed>
 1b0:	88 23       	and	r24, r24
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <app_start+0xa8>
 1b4:	39 c1       	rjmp	.+626    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			{
				current_state = Y_R;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <current_state>
				five_sec_passed = 0;
 1bc:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <five_sec_passed>
 1c0:	08 95       	ret
			}
			break;
		case Y_R:
			//Change the output (LEDs colors)
			error = led_off		(port_cars_Rled, pin_cars_Rled);
 1c2:	62 e0       	ldi	r22, 0x02	; 2
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 1ca:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_toggle	(port_cars_Yled, pin_cars_Yled);	//Cars Yellow LED Blinking
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 4b 02 	call	0x496	; 0x496 <led_toggle>
 1d6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_off		(port_cars_Gled, pin_cars_Gled);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 1e2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_on		(port_peds_Rled, pin_peds_Rled);	//Pedestrian RED LED is on
 1e6:	62 e0       	ldi	r22, 0x02	; 2
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 43 02 	call	0x486	; 0x486 <led_on>
 1ee:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_off		(port_peds_Yled, pin_peds_Yled);
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 1fa:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_off		(port_peds_Gled, pin_peds_Gled);
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 206:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			if (error!=no_err)
 20a:	88 23       	and	r24, r24
 20c:	41 f0       	breq	.+16     	; 0x21e <app_start+0x110>
			{
				printf("ERROR: app failure");
 20e:	8c e8       	ldi	r24, 0x8C	; 140
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	9f 93       	push	r25
 214:	8f 93       	push	r24
 216:	0e 94 d5 03 	call	0x7aa	; 0x7aa <printf>
 21a:	0f 90       	pop	r0
 21c:	0f 90       	pop	r0
			}
			//Change application state
			if (butt_pressed)
 21e:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <butt_pressed>
 222:	88 23       	and	r24, r24
 224:	31 f0       	breq	.+12     	; 0x232 <app_start+0x124>
			{
				current_state = Y_YR;
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <current_state>
				butt_pressed = 0;
 22c:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <butt_pressed>
 230:	08 95       	ret
			}
			else if (five_sec_passed)
 232:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <five_sec_passed>
 236:	88 23       	and	r24, r24
 238:	09 f4       	brne	.+2      	; 0x23c <app_start+0x12e>
 23a:	f6 c0       	rjmp	.+492    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			{
				current_state = R_R;
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <current_state>
				five_sec_passed = 0;
 242:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <five_sec_passed>
 246:	08 95       	ret
			}
			break;
		case R_R:
			//Change the output (LEDs colors)
			error = led_on	(port_cars_Rled, pin_cars_Rled);		//Cars RED LED is on
 248:	62 e0       	ldi	r22, 0x02	; 2
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 43 02 	call	0x486	; 0x486 <led_on>
 250:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_off	(port_cars_Gled, pin_cars_Gled);
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 25c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_off	(port_cars_Yled, pin_cars_Yled);
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 268:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_on	(port_peds_Rled, pin_peds_Rled);		//Pedestrian RED LED is on
 26c:	62 e0       	ldi	r22, 0x02	; 2
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 43 02 	call	0x486	; 0x486 <led_on>
 274:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_off	(port_peds_Yled, pin_peds_Yled);
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 280:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_off	(port_peds_Gled, pin_peds_Gled);
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 28c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			if (error!=no_err)
 290:	88 23       	and	r24, r24
 292:	41 f0       	breq	.+16     	; 0x2a4 <app_start+0x196>
			{
				printf("ERROR: app failure");
 294:	8c e8       	ldi	r24, 0x8C	; 140
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	9f 93       	push	r25
 29a:	8f 93       	push	r24
 29c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <printf>
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
			}
			//Change application state
			if (butt_pressed)
 2a4:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <butt_pressed>
 2a8:	88 23       	and	r24, r24
 2aa:	31 f0       	breq	.+12     	; 0x2b8 <app_start+0x1aa>
			{
				current_state = R_G;
 2ac:	84 e0       	ldi	r24, 0x04	; 4
 2ae:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <current_state>
				butt_pressed = 0;
 2b2:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <butt_pressed>
 2b6:	08 95       	ret
			}
			else if (five_sec_passed)
 2b8:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <five_sec_passed>
 2bc:	88 23       	and	r24, r24
 2be:	09 f4       	brne	.+2      	; 0x2c2 <app_start+0x1b4>
 2c0:	b3 c0       	rjmp	.+358    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			{
				current_state = G_R;
 2c2:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <current_state>
				five_sec_passed = 0;
 2c6:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <five_sec_passed>
 2ca:	08 95       	ret
			}
			break;
		case Y_YR:
			//Change the output (LEDs colors)
			error = led_off		(port_cars_Rled, pin_cars_Rled);	
 2cc:	62 e0       	ldi	r22, 0x02	; 2
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 2d4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_toggle	(port_cars_Yled, pin_cars_Yled);	//Cars Yellow LED is Blinking
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 4b 02 	call	0x496	; 0x496 <led_toggle>
 2e0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_off		(port_cars_Gled, pin_cars_Gled);
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 2ec:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_on		(port_peds_Rled, pin_peds_Rled);	//Pedestrian RED LED is on
 2f0:	62 e0       	ldi	r22, 0x02	; 2
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 43 02 	call	0x486	; 0x486 <led_on>
 2f8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_toggle	(port_peds_Yled, pin_peds_Yled);	//Pedestrian YELLOW LED is Blinking
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 4b 02 	call	0x496	; 0x496 <led_toggle>
 304:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_off		(port_peds_Gled, pin_peds_Gled);
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 310:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			if (error!=no_err)
 314:	88 23       	and	r24, r24
 316:	41 f0       	breq	.+16     	; 0x328 <app_start+0x21a>
			{
				printf("ERROR: app failure");
 318:	8c e8       	ldi	r24, 0x8C	; 140
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	9f 93       	push	r25
 31e:	8f 93       	push	r24
 320:	0e 94 d5 03 	call	0x7aa	; 0x7aa <printf>
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
			}
			//Change application state
			if (five_sec_passed)
 328:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <five_sec_passed>
 32c:	88 23       	and	r24, r24
 32e:	09 f4       	brne	.+2      	; 0x332 <app_start+0x224>
 330:	7b c0       	rjmp	.+246    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			{
				current_state = R_G;
 332:	84 e0       	ldi	r24, 0x04	; 4
 334:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <current_state>
				five_sec_passed = 0;
 338:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <five_sec_passed>
				butt_pressed = 0;
 33c:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <butt_pressed>
 340:	08 95       	ret
			}
			break;
		case R_G:
			//Change the output (LEDs colors)
			error = led_on		(port_cars_Rled, pin_cars_Rled);	//Cars RED LED is on
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 43 02 	call	0x486	; 0x486 <led_on>
 34a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_off		(port_cars_Yled, pin_cars_Yled);	
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 356:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_off		(port_cars_Gled, pin_cars_Gled);
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 362:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_off		(port_peds_Rled, pin_peds_Rled);	
 366:	62 e0       	ldi	r22, 0x02	; 2
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 36e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_off		(port_peds_Yled, pin_peds_Yled);	
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 37a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_on		(port_peds_Gled, pin_peds_Gled);	//Pedestrian GREEN LED is on
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 43 02 	call	0x486	; 0x486 <led_on>
 386:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			if (error!=no_err)
 38a:	88 23       	and	r24, r24
 38c:	41 f0       	breq	.+16     	; 0x39e <app_start+0x290>
			{
				printf("ERROR: app failure");
 38e:	8c e8       	ldi	r24, 0x8C	; 140
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	9f 93       	push	r25
 394:	8f 93       	push	r24
 396:	0e 94 d5 03 	call	0x7aa	; 0x7aa <printf>
 39a:	0f 90       	pop	r0
 39c:	0f 90       	pop	r0
			}
			//Change application state
			if (five_sec_passed)
 39e:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <five_sec_passed>
 3a2:	88 23       	and	r24, r24
 3a4:	09 f4       	brne	.+2      	; 0x3a8 <app_start+0x29a>
 3a6:	40 c0       	rjmp	.+128    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			{
				current_state = Y_YG;
 3a8:	85 e0       	ldi	r24, 0x05	; 5
 3aa:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <current_state>
				five_sec_passed = 0;
 3ae:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <five_sec_passed>
				butt_pressed = 0;
 3b2:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <butt_pressed>
 3b6:	08 95       	ret
			}
			break;
		case Y_YG:
			//Change the output (LEDs colors)
			error = led_off		(port_cars_Rled, pin_cars_Rled);	
 3b8:	62 e0       	ldi	r22, 0x02	; 2
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 3c0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_toggle	(port_cars_Yled, pin_cars_Yled);	//Cars YELLOW LED is Blinking
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	0e 94 4b 02 	call	0x496	; 0x496 <led_toggle>
 3cc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_off		(port_cars_Gled, pin_cars_Gled);	
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 3d8:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_off		(port_peds_Rled, pin_peds_Rled);	
 3dc:	62 e0       	ldi	r22, 0x02	; 2
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 47 02 	call	0x48e	; 0x48e <led_off>
 3e4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_toggle	(port_peds_Yled, pin_peds_Yled);	//Pedestrian YELLOW LED is Blinking
 3e8:	61 e0       	ldi	r22, 0x01	; 1
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	0e 94 4b 02 	call	0x496	; 0x496 <led_toggle>
 3f0:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			error = led_on		(port_peds_Gled, pin_peds_Gled);	//Pedestrian Green LED is on
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 43 02 	call	0x486	; 0x486 <led_on>
 3fc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
			if (error!=no_err)
 400:	88 23       	and	r24, r24
 402:	41 f0       	breq	.+16     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			{
				printf("ERROR: app failure");
 404:	8c e8       	ldi	r24, 0x8C	; 140
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	9f 93       	push	r25
 40a:	8f 93       	push	r24
 40c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <printf>
 410:	0f 90       	pop	r0
 412:	0f 90       	pop	r0
			}
			//Change application state
			if (five_sec_passed)
 414:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <five_sec_passed>
 418:	88 23       	and	r24, r24
 41a:	31 f0       	breq	.+12     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			{
				current_state = G_R;
 41c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <current_state>
				five_sec_passed = 0;
 420:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <five_sec_passed>
				butt_pressed = 0;
 424:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <butt_pressed>
 428:	08 95       	ret

0000042a <__vector_1>:
	}
}

//External interrupt 0 ISR
ISR(INT0)
{
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	2f 93       	push	r18
 436:	3f 93       	push	r19
 438:	4f 93       	push	r20
 43a:	5f 93       	push	r21
 43c:	6f 93       	push	r22
 43e:	7f 93       	push	r23
 440:	8f 93       	push	r24
 442:	9f 93       	push	r25
 444:	af 93       	push	r26
 446:	bf 93       	push	r27
 448:	ef 93       	push	r30
 44a:	ff 93       	push	r31
	butt_pressed = 1;
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <butt_pressed>
	//Restart counting
	timer_set_val(TIMER_INIT_VAL);
 452:	8c e0       	ldi	r24, 0x0C	; 12
 454:	0e 94 aa 03 	call	0x754	; 0x754 <timer_set_val>
	timer_ovf = 0;
 458:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <timer_ovf>
}
 45c:	ff 91       	pop	r31
 45e:	ef 91       	pop	r30
 460:	bf 91       	pop	r27
 462:	af 91       	pop	r26
 464:	9f 91       	pop	r25
 466:	8f 91       	pop	r24
 468:	7f 91       	pop	r23
 46a:	6f 91       	pop	r22
 46c:	5f 91       	pop	r21
 46e:	4f 91       	pop	r20
 470:	3f 91       	pop	r19
 472:	2f 91       	pop	r18
 474:	0f 90       	pop	r0
 476:	0f be       	out	0x3f, r0	; 63
 478:	0f 90       	pop	r0
 47a:	1f 90       	pop	r1
 47c:	18 95       	reti

0000047e <led_init>:
EN_error led_init	(Port p, char pinNumber)
{
	//General function flow
		//1. It should call the GPIO init function and make the direction always as output.
	//Code
	return gpio_init(p, pinNumber, Output);
 47e:	41 e0       	ldi	r20, 0x01	; 1
 480:	0e 94 55 02 	call	0x4aa	; 0x4aa <gpio_init>
}
 484:	08 95       	ret

00000486 <led_on>:
EN_error led_on		(Port p, char pinNumber)
{
	//General function flow
		//1. It should call the gpio_set_value function and make the value always as HIGH.
	//Code
	return gpio_set_value(p, pinNumber, HIGH);
 486:	41 e0       	ldi	r20, 0x01	; 1
 488:	0e 94 92 02 	call	0x524	; 0x524 <gpio_set_value>
}
 48c:	08 95       	ret

0000048e <led_off>:
EN_error led_off	(Port p, char pinNumber)
{
	//General function flow
		//1. It should call the gpio_set_value function and make the value always as LOW.
	//Code
	return gpio_set_value(p, pinNumber, LOW);	
 48e:	40 e0       	ldi	r20, 0x00	; 0
 490:	0e 94 92 02 	call	0x524	; 0x524 <gpio_set_value>
}
 494:	08 95       	ret

00000496 <led_toggle>:
EN_error led_toggle	(Port p, char pinNumber)
{
	//General function flow
		//1. It should call the gpio_toggle function.
	//Code
	return gpio_toggle(p, pinNumber);
 496:	0e 94 cf 02 	call	0x59e	; 0x59e <gpio_toggle>
}
 49a:	08 95       	ret

0000049c <main>:
	//Testing drivers
		//test_gpio();
		//test_but();
		//test_led();
		//test_interrupt();
		test_timer();
 49c:	0e 94 ac 03 	call	0x758	; 0x758 <test_timer>
		
    /* Application code */
	app_init();
 4a0:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
    while (1) 
    {
		app_start();
 4a4:	0e 94 87 00 	call	0x10e	; 0x10e <app_start>
 4a8:	fd cf       	rjmp	.-6      	; 0x4a4 <main+0x8>

000004aa <gpio_init>:
		default:
		return gpio_err; //printf("Error! Could not read GPIO value");
		break;
	}
	return no_err;
}
 4aa:	88 23       	and	r24, r24
 4ac:	19 f0       	breq	.+6      	; 0x4b4 <gpio_init+0xa>
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	e1 f0       	breq	.+56     	; 0x4ea <gpio_init+0x40>
 4b2:	36 c0       	rjmp	.+108    	; 0x520 <gpio_init+0x76>
 4b4:	41 11       	cpse	r20, r1
 4b6:	0d c0       	rjmp	.+26     	; 0x4d2 <gpio_init+0x28>
 4b8:	2a b3       	in	r18, 0x1a	; 26
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <gpio_init+0x1a>
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	6a 95       	dec	r22
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <gpio_init+0x16>
 4c8:	80 95       	com	r24
 4ca:	82 23       	and	r24, r18
 4cc:	8a bb       	out	0x1a, r24	; 26
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	08 95       	ret
 4d2:	2a b3       	in	r18, 0x1a	; 26
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <gpio_init+0x34>
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	6a 95       	dec	r22
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <gpio_init+0x30>
 4e2:	82 2b       	or	r24, r18
 4e4:	8a bb       	out	0x1a, r24	; 26
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	08 95       	ret
 4ea:	41 11       	cpse	r20, r1
 4ec:	0d c0       	rjmp	.+26     	; 0x508 <gpio_init+0x5e>
 4ee:	27 b3       	in	r18, 0x17	; 23
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <gpio_init+0x50>
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	6a 95       	dec	r22
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <gpio_init+0x4c>
 4fe:	80 95       	com	r24
 500:	82 23       	and	r24, r18
 502:	87 bb       	out	0x17, r24	; 23
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	08 95       	ret
 508:	27 b3       	in	r18, 0x17	; 23
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	02 c0       	rjmp	.+4      	; 0x514 <gpio_init+0x6a>
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	6a 95       	dec	r22
 516:	e2 f7       	brpl	.-8      	; 0x510 <gpio_init+0x66>
 518:	82 2b       	or	r24, r18
 51a:	87 bb       	out	0x17, r24	; 23
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	08 95       	ret
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	08 95       	ret

00000524 <gpio_set_value>:
 524:	88 23       	and	r24, r24
 526:	19 f0       	breq	.+6      	; 0x52e <gpio_set_value+0xa>
 528:	81 30       	cpi	r24, 0x01	; 1
 52a:	e1 f0       	breq	.+56     	; 0x564 <gpio_set_value+0x40>
 52c:	36 c0       	rjmp	.+108    	; 0x59a <gpio_set_value+0x76>
 52e:	41 11       	cpse	r20, r1
 530:	0d c0       	rjmp	.+26     	; 0x54c <gpio_set_value+0x28>
 532:	2b b3       	in	r18, 0x1b	; 27
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	02 c0       	rjmp	.+4      	; 0x53e <gpio_set_value+0x1a>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	6a 95       	dec	r22
 540:	e2 f7       	brpl	.-8      	; 0x53a <gpio_set_value+0x16>
 542:	80 95       	com	r24
 544:	82 23       	and	r24, r18
 546:	8b bb       	out	0x1b, r24	; 27
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	08 95       	ret
 54c:	2b b3       	in	r18, 0x1b	; 27
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <gpio_set_value+0x34>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	6a 95       	dec	r22
 55a:	e2 f7       	brpl	.-8      	; 0x554 <gpio_set_value+0x30>
 55c:	82 2b       	or	r24, r18
 55e:	8b bb       	out	0x1b, r24	; 27
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	08 95       	ret
 564:	41 11       	cpse	r20, r1
 566:	0d c0       	rjmp	.+26     	; 0x582 <gpio_set_value+0x5e>
 568:	28 b3       	in	r18, 0x18	; 24
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	02 c0       	rjmp	.+4      	; 0x574 <gpio_set_value+0x50>
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	6a 95       	dec	r22
 576:	e2 f7       	brpl	.-8      	; 0x570 <gpio_set_value+0x4c>
 578:	80 95       	com	r24
 57a:	82 23       	and	r24, r18
 57c:	88 bb       	out	0x18, r24	; 24
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	08 95       	ret
 582:	28 b3       	in	r18, 0x18	; 24
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	02 c0       	rjmp	.+4      	; 0x58e <gpio_set_value+0x6a>
 58a:	88 0f       	add	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	6a 95       	dec	r22
 590:	e2 f7       	brpl	.-8      	; 0x58a <gpio_set_value+0x66>
 592:	82 2b       	or	r24, r18
 594:	88 bb       	out	0x18, r24	; 24
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	08 95       	ret
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	08 95       	ret

0000059e <gpio_toggle>:
{
	//General function flow
		//1. Determine the port based on value of port
		//2. Using pin_Num, toggle the chosen pin in register PORTx.
	//Code
	switch (port) {
 59e:	88 23       	and	r24, r24
 5a0:	19 f0       	breq	.+6      	; 0x5a8 <gpio_toggle+0xa>
 5a2:	81 30       	cpi	r24, 0x01	; 1
 5a4:	69 f0       	breq	.+26     	; 0x5c0 <gpio_toggle+0x22>
 5a6:	18 c0       	rjmp	.+48     	; 0x5d8 <gpio_toggle+0x3a>
		case PORT_A:
		TOGGLE_BIT(PORTA,pinNum);
 5a8:	2b b3       	in	r18, 0x1b	; 27
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <gpio_toggle+0x16>
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	6a 95       	dec	r22
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <gpio_toggle+0x12>
 5b8:	82 27       	eor	r24, r18
 5ba:	8b bb       	out	0x1b, r24	; 27
		break;
		default:
		return gpio_err; //printf("Error! Could not toggle GPIO");
		break;
	}
	return no_err;
 5bc:	80 e0       	ldi	r24, 0x00	; 0
		//2. Using pin_Num, toggle the chosen pin in register PORTx.
	//Code
	switch (port) {
		case PORT_A:
		TOGGLE_BIT(PORTA,pinNum);
		break;
 5be:	08 95       	ret
		case PORT_B:
		TOGGLE_BIT(PORTB,pinNum);
 5c0:	28 b3       	in	r18, 0x18	; 24
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <gpio_toggle+0x2e>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	6a 95       	dec	r22
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <gpio_toggle+0x2a>
 5d0:	82 27       	eor	r24, r18
 5d2:	88 bb       	out	0x18, r24	; 24
		break;
		default:
		return gpio_err; //printf("Error! Could not toggle GPIO");
		break;
	}
	return no_err;
 5d4:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_A:
		TOGGLE_BIT(PORTA,pinNum);
		break;
		case PORT_B:
		TOGGLE_BIT(PORTB,pinNum);
		break;
 5d6:	08 95       	ret
		default:
		return gpio_err; //printf("Error! Could not toggle GPIO");
 5d8:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}
	return no_err;
}
 5da:	08 95       	ret

000005dc <interrupt_en>:
	//General function flow
		//1. enable global interrupts.
		//2. choose the interrupt source
			//3. choose trigger type
	//Code
	SET_HIGH(SREG, 7);
 5dc:	9f b7       	in	r25, 0x3f	; 63
 5de:	90 68       	ori	r25, 0x80	; 128
 5e0:	9f bf       	out	0x3f, r25	; 63
	switch (ext_int) {
 5e2:	81 30       	cpi	r24, 0x01	; 1
 5e4:	69 f1       	breq	.+90     	; 0x640 <interrupt_en+0x64>
 5e6:	20 f0       	brcs	.+8      	; 0x5f0 <interrupt_en+0x14>
 5e8:	82 30       	cpi	r24, 0x02	; 2
 5ea:	09 f4       	brne	.+2      	; 0x5ee <interrupt_en+0x12>
 5ec:	51 c0       	rjmp	.+162    	; 0x690 <interrupt_en+0xb4>
 5ee:	58 c0       	rjmp	.+176    	; 0x6a0 <interrupt_en+0xc4>
		case INT_0:
		switch (trigg) 
 5f0:	61 30       	cpi	r22, 0x01	; 1
 5f2:	69 f0       	breq	.+26     	; 0x60e <interrupt_en+0x32>
 5f4:	28 f0       	brcs	.+10     	; 0x600 <interrupt_en+0x24>
 5f6:	62 30       	cpi	r22, 0x02	; 2
 5f8:	89 f0       	breq	.+34     	; 0x61c <interrupt_en+0x40>
 5fa:	63 30       	cpi	r22, 0x03	; 3
 5fc:	b1 f0       	breq	.+44     	; 0x62a <interrupt_en+0x4e>
 5fe:	52 c0       	rjmp	.+164    	; 0x6a4 <interrupt_en+0xc8>
		{
			case LOW_LVL:
			SET_LOW(MCUCR,0); SET_LOW(MCUCR,1);
 600:	85 b7       	in	r24, 0x35	; 53
 602:	8e 7f       	andi	r24, 0xFE	; 254
 604:	85 bf       	out	0x35, r24	; 53
 606:	85 b7       	in	r24, 0x35	; 53
 608:	8d 7f       	andi	r24, 0xFD	; 253
 60a:	85 bf       	out	0x35, r24	; 53
			break;
 60c:	14 c0       	rjmp	.+40     	; 0x636 <interrupt_en+0x5a>
			case ANY_CHNG:
			SET_HIGH(MCUCR,0); SET_LOW(MCUCR,1);
 60e:	85 b7       	in	r24, 0x35	; 53
 610:	81 60       	ori	r24, 0x01	; 1
 612:	85 bf       	out	0x35, r24	; 53
 614:	85 b7       	in	r24, 0x35	; 53
 616:	8d 7f       	andi	r24, 0xFD	; 253
 618:	85 bf       	out	0x35, r24	; 53
			break;
 61a:	0d c0       	rjmp	.+26     	; 0x636 <interrupt_en+0x5a>
			case FAL_EDG:
			SET_LOW(MCUCR,0); SET_HIGH(MCUCR,1);
 61c:	85 b7       	in	r24, 0x35	; 53
 61e:	8e 7f       	andi	r24, 0xFE	; 254
 620:	85 bf       	out	0x35, r24	; 53
 622:	85 b7       	in	r24, 0x35	; 53
 624:	82 60       	ori	r24, 0x02	; 2
 626:	85 bf       	out	0x35, r24	; 53
			break;
 628:	06 c0       	rjmp	.+12     	; 0x636 <interrupt_en+0x5a>
			case RIS_EDG:
			SET_HIGH(MCUCR,0); SET_HIGH(MCUCR,1);
 62a:	85 b7       	in	r24, 0x35	; 53
 62c:	81 60       	ori	r24, 0x01	; 1
 62e:	85 bf       	out	0x35, r24	; 53
 630:	85 b7       	in	r24, 0x35	; 53
 632:	82 60       	ori	r24, 0x02	; 2
 634:	85 bf       	out	0x35, r24	; 53
			break;
			default:
			return intrpt_err; //printf("Error! Could not set trigger method of interrupt");
			break;
		}
		SET_HIGH(GICR,6);	//The default interrupt trigger is LOW. That's why we can't enable INT0 unless we specify the correct trigger first.
 636:	8b b7       	in	r24, 0x3b	; 59
 638:	80 64       	ori	r24, 0x40	; 64
 63a:	8b bf       	out	0x3b, r24	; 59
		break;
		default:
		return intrpt_err; //printf("Error! Could not enable the appropriate external interrupt source");
		break;
	}
	return no_err;
 63c:	80 e0       	ldi	r24, 0x00	; 0
			return intrpt_err; //printf("Error! Could not set trigger method of interrupt");
			break;
		}
		SET_HIGH(GICR,6);	//The default interrupt trigger is LOW. That's why we can't enable INT0 unless we specify the correct trigger first.
							//Otherwise, it will keep triggering the interrupt and the application won't run at all!
		break;
 63e:	08 95       	ret
		case INT_1:
		switch (trigg) {
 640:	61 30       	cpi	r22, 0x01	; 1
 642:	69 f0       	breq	.+26     	; 0x65e <interrupt_en+0x82>
 644:	28 f0       	brcs	.+10     	; 0x650 <interrupt_en+0x74>
 646:	62 30       	cpi	r22, 0x02	; 2
 648:	89 f0       	breq	.+34     	; 0x66c <interrupt_en+0x90>
 64a:	63 30       	cpi	r22, 0x03	; 3
 64c:	b1 f0       	breq	.+44     	; 0x67a <interrupt_en+0x9e>
 64e:	2c c0       	rjmp	.+88     	; 0x6a8 <interrupt_en+0xcc>
			case LOW_LVL:
			SET_LOW(MCUCR,2); SET_LOW(MCUCR,3);
 650:	85 b7       	in	r24, 0x35	; 53
 652:	8b 7f       	andi	r24, 0xFB	; 251
 654:	85 bf       	out	0x35, r24	; 53
 656:	85 b7       	in	r24, 0x35	; 53
 658:	87 7f       	andi	r24, 0xF7	; 247
 65a:	85 bf       	out	0x35, r24	; 53
			break;
 65c:	14 c0       	rjmp	.+40     	; 0x686 <interrupt_en+0xaa>
			case ANY_CHNG:
			SET_HIGH(MCUCR,2); SET_LOW(MCUCR,3);
 65e:	85 b7       	in	r24, 0x35	; 53
 660:	84 60       	ori	r24, 0x04	; 4
 662:	85 bf       	out	0x35, r24	; 53
 664:	85 b7       	in	r24, 0x35	; 53
 666:	87 7f       	andi	r24, 0xF7	; 247
 668:	85 bf       	out	0x35, r24	; 53
			break;
 66a:	0d c0       	rjmp	.+26     	; 0x686 <interrupt_en+0xaa>
			case FAL_EDG:
			SET_LOW(MCUCR,2); SET_HIGH(MCUCR,3);
 66c:	85 b7       	in	r24, 0x35	; 53
 66e:	8b 7f       	andi	r24, 0xFB	; 251
 670:	85 bf       	out	0x35, r24	; 53
 672:	85 b7       	in	r24, 0x35	; 53
 674:	88 60       	ori	r24, 0x08	; 8
 676:	85 bf       	out	0x35, r24	; 53
			break;
 678:	06 c0       	rjmp	.+12     	; 0x686 <interrupt_en+0xaa>
			case RIS_EDG:
			SET_HIGH(MCUCR,2); SET_HIGH(MCUCR,3);
 67a:	85 b7       	in	r24, 0x35	; 53
 67c:	84 60       	ori	r24, 0x04	; 4
 67e:	85 bf       	out	0x35, r24	; 53
 680:	85 b7       	in	r24, 0x35	; 53
 682:	88 60       	ori	r24, 0x08	; 8
 684:	85 bf       	out	0x35, r24	; 53
			break;
			default:
			return intrpt_err; //printf("Error! Could not set trigger method of interrupt");
			break;
		}
		SET_HIGH(GICR, 7);
 686:	8b b7       	in	r24, 0x3b	; 59
 688:	80 68       	ori	r24, 0x80	; 128
 68a:	8b bf       	out	0x3b, r24	; 59
		break;
		default:
		return intrpt_err; //printf("Error! Could not enable the appropriate external interrupt source");
		break;
	}
	return no_err;
 68c:	80 e0       	ldi	r24, 0x00	; 0
			default:
			return intrpt_err; //printf("Error! Could not set trigger method of interrupt");
			break;
		}
		SET_HIGH(GICR, 7);
		break;
 68e:	08 95       	ret
		case INT_2:
		switch (trigg) {
 690:	62 50       	subi	r22, 0x02	; 2
 692:	62 30       	cpi	r22, 0x02	; 2
 694:	58 f4       	brcc	.+22     	; 0x6ac <interrupt_en+0xd0>
			break;
			default:
			return intrpt_err; //printf("Error! Could not set trigger method of interrupt");
			break;
		}
		SET_HIGH(GICR, 5);
 696:	8b b7       	in	r24, 0x3b	; 59
 698:	80 62       	ori	r24, 0x20	; 32
 69a:	8b bf       	out	0x3b, r24	; 59
		break;
		default:
		return intrpt_err; //printf("Error! Could not enable the appropriate external interrupt source");
		break;
	}
	return no_err;
 69c:	80 e0       	ldi	r24, 0x00	; 0
			default:
			return intrpt_err; //printf("Error! Could not set trigger method of interrupt");
			break;
		}
		SET_HIGH(GICR, 5);
		break;
 69e:	08 95       	ret
		default:
		return intrpt_err; //printf("Error! Could not enable the appropriate external interrupt source");
 6a0:	82 e0       	ldi	r24, 0x02	; 2
 6a2:	08 95       	ret
			break;
			case RIS_EDG:
			SET_HIGH(MCUCR,0); SET_HIGH(MCUCR,1);
			break;
			default:
			return intrpt_err; //printf("Error! Could not set trigger method of interrupt");
 6a4:	82 e0       	ldi	r24, 0x02	; 2
 6a6:	08 95       	ret
			break;
			case RIS_EDG:
			SET_HIGH(MCUCR,2); SET_HIGH(MCUCR,3);
			break;
			default:
			return intrpt_err; //printf("Error! Could not set trigger method of interrupt");
 6a8:	82 e0       	ldi	r24, 0x02	; 2
 6aa:	08 95       	ret
			break;
			case RIS_EDG:
			//.........
			break;
			default:
			return intrpt_err; //printf("Error! Could not set trigger method of interrupt");
 6ac:	82 e0       	ldi	r24, 0x02	; 2
		default:
		return intrpt_err; //printf("Error! Could not enable the appropriate external interrupt source");
		break;
	}
	return no_err;
}
 6ae:	08 95       	ret

000006b0 <timer_init>:
		default:
		return timr_err; //("Error! Could not get the appropriate flag value");
		break;
	}
	return no_err;
}
 6b0:	88 23       	and	r24, r24
 6b2:	21 f0       	breq	.+8      	; 0x6bc <timer_init+0xc>
 6b4:	81 30       	cpi	r24, 0x01	; 1
 6b6:	f1 f1       	breq	.+124    	; 0x734 <timer_init+0x84>
 6b8:	83 e0       	ldi	r24, 0x03	; 3
 6ba:	08 95       	ret
 6bc:	62 bf       	out	0x32, r22	; 50
 6be:	22 23       	and	r18, r18
 6c0:	19 f0       	breq	.+6      	; 0x6c8 <timer_init+0x18>
 6c2:	89 b7       	in	r24, 0x39	; 57
 6c4:	81 60       	ori	r24, 0x01	; 1
 6c6:	89 bf       	out	0x39, r24	; 57
 6c8:	40 34       	cpi	r20, 0x40	; 64
 6ca:	51 05       	cpc	r21, r1
 6cc:	f1 f0       	breq	.+60     	; 0x70a <timer_init+0x5a>
 6ce:	3c f4       	brge	.+14     	; 0x6de <timer_init+0x2e>
 6d0:	41 30       	cpi	r20, 0x01	; 1
 6d2:	51 05       	cpc	r21, r1
 6d4:	61 f0       	breq	.+24     	; 0x6ee <timer_init+0x3e>
 6d6:	48 30       	cpi	r20, 0x08	; 8
 6d8:	51 05       	cpc	r21, r1
 6da:	81 f0       	breq	.+32     	; 0x6fc <timer_init+0x4c>
 6dc:	2d c0       	rjmp	.+90     	; 0x738 <timer_init+0x88>
 6de:	41 15       	cp	r20, r1
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	58 07       	cpc	r21, r24
 6e4:	c9 f0       	breq	.+50     	; 0x718 <timer_init+0x68>
 6e6:	41 15       	cp	r20, r1
 6e8:	54 40       	sbci	r21, 0x04	; 4
 6ea:	e9 f0       	breq	.+58     	; 0x726 <timer_init+0x76>
 6ec:	25 c0       	rjmp	.+74     	; 0x738 <timer_init+0x88>
 6ee:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <TCCR0_temp>
 6f2:	81 60       	ori	r24, 0x01	; 1
 6f4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <TCCR0_temp>
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	08 95       	ret
 6fc:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <TCCR0_temp>
 700:	82 60       	ori	r24, 0x02	; 2
 702:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <TCCR0_temp>
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	08 95       	ret
 70a:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <TCCR0_temp>
 70e:	83 60       	ori	r24, 0x03	; 3
 710:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <TCCR0_temp>
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	08 95       	ret
 718:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <TCCR0_temp>
 71c:	84 60       	ori	r24, 0x04	; 4
 71e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <TCCR0_temp>
 722:	80 e0       	ldi	r24, 0x00	; 0
 724:	08 95       	ret
 726:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <TCCR0_temp>
 72a:	85 60       	ori	r24, 0x05	; 5
 72c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <TCCR0_temp>
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	08 95       	ret
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	08 95       	ret
 738:	83 e0       	ldi	r24, 0x03	; 3
 73a:	08 95       	ret

0000073c <timer_start>:
 73c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <TCCR0_temp>
 740:	88 23       	and	r24, r24
 742:	19 f0       	breq	.+6      	; 0x74a <timer_start+0xe>
 744:	83 bf       	out	0x33, r24	; 51
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	08 95       	ret
 74a:	83 e0       	ldi	r24, 0x03	; 3
 74c:	08 95       	ret

0000074e <timer_stop>:
 74e:	83 b7       	in	r24, 0x33	; 51
 750:	13 be       	out	0x33, r1	; 51
 752:	08 95       	ret

00000754 <timer_set_val>:
 754:	82 bf       	out	0x32, r24	; 50
 756:	08 95       	ret

00000758 <test_timer>:
		//2. timer_start: call the function, and note the time at which this function starts
		//3. timer_get_state: call the function, and note the time at which the outputed flag is HIGH
		//4. timer_stop: call the function, and read the value of TCNT0 multiple times and check it it's the same
	//Code
	EN_error error = no_err;
	SET_HIGH(SREG, 7);	//Enable global interrupt
 758:	8f b7       	in	r24, 0x3f	; 63
 75a:	80 68       	ori	r24, 0x80	; 128
 75c:	8f bf       	out	0x3f, r24	; 63
	timer_init(normal,0,1,1);
 75e:	21 e0       	ldi	r18, 0x01	; 1
 760:	41 e0       	ldi	r20, 0x01	; 1
 762:	50 e0       	ldi	r21, 0x00	; 0
 764:	60 e0       	ldi	r22, 0x00	; 0
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	0e 94 58 03 	call	0x6b0	; 0x6b0 <timer_init>
	//Note the time
	timer_start();	
 76c:	0e 94 9e 03 	call	0x73c	; 0x73c <timer_start>
	while (test_flag==0)
 770:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <test_flag>
 774:	88 23       	and	r24, r24
 776:	e1 f3       	breq	.-8      	; 0x770 <test_timer+0x18>
	{
		//
	}
	//Note the time
	timer_stop();
 778:	0e 94 a7 03 	call	0x74e	; 0x74e <timer_stop>
	for (int i=0; i<3; i++)
 77c:	80 e0       	ldi	r24, 0x00	; 0
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	01 c0       	rjmp	.+2      	; 0x784 <test_timer+0x2c>
 782:	01 96       	adiw	r24, 0x01	; 1
 784:	83 30       	cpi	r24, 0x03	; 3
 786:	91 05       	cpc	r25, r1
 788:	e4 f3       	brlt	.-8      	; 0x782 <test_timer+0x2a>
	}
	if (error!=no_err)
	{
		printf("ERROR");
	}
}
 78a:	08 95       	ret

0000078c <__vector_11>:

ISR(TIMER0_OVF)
{
 78c:	1f 92       	push	r1
 78e:	0f 92       	push	r0
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	0f 92       	push	r0
 794:	11 24       	eor	r1, r1
 796:	8f 93       	push	r24
	test_flag = 1;
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <test_flag>
 79e:	8f 91       	pop	r24
 7a0:	0f 90       	pop	r0
 7a2:	0f be       	out	0x3f, r0	; 63
 7a4:	0f 90       	pop	r0
 7a6:	1f 90       	pop	r1
 7a8:	18 95       	reti

000007aa <printf>:
 7aa:	a0 e0       	ldi	r26, 0x00	; 0
 7ac:	b0 e0       	ldi	r27, 0x00	; 0
 7ae:	eb ed       	ldi	r30, 0xDB	; 219
 7b0:	f3 e0       	ldi	r31, 0x03	; 3
 7b2:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__prologue_saves__+0x20>
 7b6:	ae 01       	movw	r20, r28
 7b8:	4b 5f       	subi	r20, 0xFB	; 251
 7ba:	5f 4f       	sbci	r21, 0xFF	; 255
 7bc:	fa 01       	movw	r30, r20
 7be:	61 91       	ld	r22, Z+
 7c0:	71 91       	ld	r23, Z+
 7c2:	af 01       	movw	r20, r30
 7c4:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <__iob+0x2>
 7c8:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <__iob+0x3>
 7cc:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <vfprintf>
 7d0:	e2 e0       	ldi	r30, 0x02	; 2
 7d2:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__epilogue_restores__+0x20>

000007d6 <vfprintf>:
 7d6:	ab e0       	ldi	r26, 0x0B	; 11
 7d8:	b0 e0       	ldi	r27, 0x00	; 0
 7da:	e1 ef       	ldi	r30, 0xF1	; 241
 7dc:	f3 e0       	ldi	r31, 0x03	; 3
 7de:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__prologue_saves__>
 7e2:	6c 01       	movw	r12, r24
 7e4:	7b 01       	movw	r14, r22
 7e6:	8a 01       	movw	r16, r20
 7e8:	fc 01       	movw	r30, r24
 7ea:	17 82       	std	Z+7, r1	; 0x07
 7ec:	16 82       	std	Z+6, r1	; 0x06
 7ee:	83 81       	ldd	r24, Z+3	; 0x03
 7f0:	81 ff       	sbrs	r24, 1
 7f2:	cc c1       	rjmp	.+920    	; 0xb8c <__stack+0x32d>
 7f4:	ce 01       	movw	r24, r28
 7f6:	01 96       	adiw	r24, 0x01	; 1
 7f8:	3c 01       	movw	r6, r24
 7fa:	f6 01       	movw	r30, r12
 7fc:	93 81       	ldd	r25, Z+3	; 0x03
 7fe:	f7 01       	movw	r30, r14
 800:	93 fd       	sbrc	r25, 3
 802:	85 91       	lpm	r24, Z+
 804:	93 ff       	sbrs	r25, 3
 806:	81 91       	ld	r24, Z+
 808:	7f 01       	movw	r14, r30
 80a:	88 23       	and	r24, r24
 80c:	09 f4       	brne	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80e:	ba c1       	rjmp	.+884    	; 0xb84 <__stack+0x325>
 810:	85 32       	cpi	r24, 0x25	; 37
 812:	39 f4       	brne	.+14     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 814:	93 fd       	sbrc	r25, 3
 816:	85 91       	lpm	r24, Z+
 818:	93 ff       	sbrs	r25, 3
 81a:	81 91       	ld	r24, Z+
 81c:	7f 01       	movw	r14, r30
 81e:	85 32       	cpi	r24, 0x25	; 37
 820:	29 f4       	brne	.+10     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 822:	b6 01       	movw	r22, r12
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 82a:	e7 cf       	rjmp	.-50     	; 0x7fa <vfprintf+0x24>
 82c:	91 2c       	mov	r9, r1
 82e:	21 2c       	mov	r2, r1
 830:	31 2c       	mov	r3, r1
 832:	ff e1       	ldi	r31, 0x1F	; 31
 834:	f3 15       	cp	r31, r3
 836:	d8 f0       	brcs	.+54     	; 0x86e <__stack+0xf>
 838:	8b 32       	cpi	r24, 0x2B	; 43
 83a:	79 f0       	breq	.+30     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 83c:	38 f4       	brcc	.+14     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 83e:	80 32       	cpi	r24, 0x20	; 32
 840:	79 f0       	breq	.+30     	; 0x860 <__stack+0x1>
 842:	83 32       	cpi	r24, 0x23	; 35
 844:	a1 f4       	brne	.+40     	; 0x86e <__stack+0xf>
 846:	23 2d       	mov	r18, r3
 848:	20 61       	ori	r18, 0x10	; 16
 84a:	1d c0       	rjmp	.+58     	; 0x886 <__stack+0x27>
 84c:	8d 32       	cpi	r24, 0x2D	; 45
 84e:	61 f0       	breq	.+24     	; 0x868 <__stack+0x9>
 850:	80 33       	cpi	r24, 0x30	; 48
 852:	69 f4       	brne	.+26     	; 0x86e <__stack+0xf>
 854:	23 2d       	mov	r18, r3
 856:	21 60       	ori	r18, 0x01	; 1
 858:	16 c0       	rjmp	.+44     	; 0x886 <__stack+0x27>
 85a:	83 2d       	mov	r24, r3
 85c:	82 60       	ori	r24, 0x02	; 2
 85e:	38 2e       	mov	r3, r24
 860:	e3 2d       	mov	r30, r3
 862:	e4 60       	ori	r30, 0x04	; 4
 864:	3e 2e       	mov	r3, r30
 866:	2a c0       	rjmp	.+84     	; 0x8bc <__stack+0x5d>
 868:	f3 2d       	mov	r31, r3
 86a:	f8 60       	ori	r31, 0x08	; 8
 86c:	1d c0       	rjmp	.+58     	; 0x8a8 <__stack+0x49>
 86e:	37 fc       	sbrc	r3, 7
 870:	2d c0       	rjmp	.+90     	; 0x8cc <__stack+0x6d>
 872:	20 ed       	ldi	r18, 0xD0	; 208
 874:	28 0f       	add	r18, r24
 876:	2a 30       	cpi	r18, 0x0A	; 10
 878:	40 f0       	brcs	.+16     	; 0x88a <__stack+0x2b>
 87a:	8e 32       	cpi	r24, 0x2E	; 46
 87c:	b9 f4       	brne	.+46     	; 0x8ac <__stack+0x4d>
 87e:	36 fc       	sbrc	r3, 6
 880:	81 c1       	rjmp	.+770    	; 0xb84 <__stack+0x325>
 882:	23 2d       	mov	r18, r3
 884:	20 64       	ori	r18, 0x40	; 64
 886:	32 2e       	mov	r3, r18
 888:	19 c0       	rjmp	.+50     	; 0x8bc <__stack+0x5d>
 88a:	36 fe       	sbrs	r3, 6
 88c:	06 c0       	rjmp	.+12     	; 0x89a <__stack+0x3b>
 88e:	8a e0       	ldi	r24, 0x0A	; 10
 890:	98 9e       	mul	r9, r24
 892:	20 0d       	add	r18, r0
 894:	11 24       	eor	r1, r1
 896:	92 2e       	mov	r9, r18
 898:	11 c0       	rjmp	.+34     	; 0x8bc <__stack+0x5d>
 89a:	ea e0       	ldi	r30, 0x0A	; 10
 89c:	2e 9e       	mul	r2, r30
 89e:	20 0d       	add	r18, r0
 8a0:	11 24       	eor	r1, r1
 8a2:	22 2e       	mov	r2, r18
 8a4:	f3 2d       	mov	r31, r3
 8a6:	f0 62       	ori	r31, 0x20	; 32
 8a8:	3f 2e       	mov	r3, r31
 8aa:	08 c0       	rjmp	.+16     	; 0x8bc <__stack+0x5d>
 8ac:	8c 36       	cpi	r24, 0x6C	; 108
 8ae:	21 f4       	brne	.+8      	; 0x8b8 <__stack+0x59>
 8b0:	83 2d       	mov	r24, r3
 8b2:	80 68       	ori	r24, 0x80	; 128
 8b4:	38 2e       	mov	r3, r24
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <__stack+0x5d>
 8b8:	88 36       	cpi	r24, 0x68	; 104
 8ba:	41 f4       	brne	.+16     	; 0x8cc <__stack+0x6d>
 8bc:	f7 01       	movw	r30, r14
 8be:	93 fd       	sbrc	r25, 3
 8c0:	85 91       	lpm	r24, Z+
 8c2:	93 ff       	sbrs	r25, 3
 8c4:	81 91       	ld	r24, Z+
 8c6:	7f 01       	movw	r14, r30
 8c8:	81 11       	cpse	r24, r1
 8ca:	b3 cf       	rjmp	.-154    	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 8cc:	98 2f       	mov	r25, r24
 8ce:	9f 7d       	andi	r25, 0xDF	; 223
 8d0:	95 54       	subi	r25, 0x45	; 69
 8d2:	93 30       	cpi	r25, 0x03	; 3
 8d4:	28 f4       	brcc	.+10     	; 0x8e0 <__stack+0x81>
 8d6:	0c 5f       	subi	r16, 0xFC	; 252
 8d8:	1f 4f       	sbci	r17, 0xFF	; 255
 8da:	9f e3       	ldi	r25, 0x3F	; 63
 8dc:	99 83       	std	Y+1, r25	; 0x01
 8de:	0d c0       	rjmp	.+26     	; 0x8fa <__stack+0x9b>
 8e0:	83 36       	cpi	r24, 0x63	; 99
 8e2:	31 f0       	breq	.+12     	; 0x8f0 <__stack+0x91>
 8e4:	83 37       	cpi	r24, 0x73	; 115
 8e6:	71 f0       	breq	.+28     	; 0x904 <__stack+0xa5>
 8e8:	83 35       	cpi	r24, 0x53	; 83
 8ea:	09 f0       	breq	.+2      	; 0x8ee <__stack+0x8f>
 8ec:	59 c0       	rjmp	.+178    	; 0x9a0 <__stack+0x141>
 8ee:	21 c0       	rjmp	.+66     	; 0x932 <__stack+0xd3>
 8f0:	f8 01       	movw	r30, r16
 8f2:	80 81       	ld	r24, Z
 8f4:	89 83       	std	Y+1, r24	; 0x01
 8f6:	0e 5f       	subi	r16, 0xFE	; 254
 8f8:	1f 4f       	sbci	r17, 0xFF	; 255
 8fa:	88 24       	eor	r8, r8
 8fc:	83 94       	inc	r8
 8fe:	91 2c       	mov	r9, r1
 900:	53 01       	movw	r10, r6
 902:	13 c0       	rjmp	.+38     	; 0x92a <__stack+0xcb>
 904:	28 01       	movw	r4, r16
 906:	f2 e0       	ldi	r31, 0x02	; 2
 908:	4f 0e       	add	r4, r31
 90a:	51 1c       	adc	r5, r1
 90c:	f8 01       	movw	r30, r16
 90e:	a0 80       	ld	r10, Z
 910:	b1 80       	ldd	r11, Z+1	; 0x01
 912:	36 fe       	sbrs	r3, 6
 914:	03 c0       	rjmp	.+6      	; 0x91c <__stack+0xbd>
 916:	69 2d       	mov	r22, r9
 918:	70 e0       	ldi	r23, 0x00	; 0
 91a:	02 c0       	rjmp	.+4      	; 0x920 <__stack+0xc1>
 91c:	6f ef       	ldi	r22, 0xFF	; 255
 91e:	7f ef       	ldi	r23, 0xFF	; 255
 920:	c5 01       	movw	r24, r10
 922:	0e 94 d7 05 	call	0xbae	; 0xbae <strnlen>
 926:	4c 01       	movw	r8, r24
 928:	82 01       	movw	r16, r4
 92a:	f3 2d       	mov	r31, r3
 92c:	ff 77       	andi	r31, 0x7F	; 127
 92e:	3f 2e       	mov	r3, r31
 930:	16 c0       	rjmp	.+44     	; 0x95e <__stack+0xff>
 932:	28 01       	movw	r4, r16
 934:	22 e0       	ldi	r18, 0x02	; 2
 936:	42 0e       	add	r4, r18
 938:	51 1c       	adc	r5, r1
 93a:	f8 01       	movw	r30, r16
 93c:	a0 80       	ld	r10, Z
 93e:	b1 80       	ldd	r11, Z+1	; 0x01
 940:	36 fe       	sbrs	r3, 6
 942:	03 c0       	rjmp	.+6      	; 0x94a <__stack+0xeb>
 944:	69 2d       	mov	r22, r9
 946:	70 e0       	ldi	r23, 0x00	; 0
 948:	02 c0       	rjmp	.+4      	; 0x94e <__stack+0xef>
 94a:	6f ef       	ldi	r22, 0xFF	; 255
 94c:	7f ef       	ldi	r23, 0xFF	; 255
 94e:	c5 01       	movw	r24, r10
 950:	0e 94 cc 05 	call	0xb98	; 0xb98 <strnlen_P>
 954:	4c 01       	movw	r8, r24
 956:	f3 2d       	mov	r31, r3
 958:	f0 68       	ori	r31, 0x80	; 128
 95a:	3f 2e       	mov	r3, r31
 95c:	82 01       	movw	r16, r4
 95e:	33 fc       	sbrc	r3, 3
 960:	1b c0       	rjmp	.+54     	; 0x998 <__stack+0x139>
 962:	82 2d       	mov	r24, r2
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	88 16       	cp	r8, r24
 968:	99 06       	cpc	r9, r25
 96a:	b0 f4       	brcc	.+44     	; 0x998 <__stack+0x139>
 96c:	b6 01       	movw	r22, r12
 96e:	80 e2       	ldi	r24, 0x20	; 32
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 976:	2a 94       	dec	r2
 978:	f4 cf       	rjmp	.-24     	; 0x962 <__stack+0x103>
 97a:	f5 01       	movw	r30, r10
 97c:	37 fc       	sbrc	r3, 7
 97e:	85 91       	lpm	r24, Z+
 980:	37 fe       	sbrs	r3, 7
 982:	81 91       	ld	r24, Z+
 984:	5f 01       	movw	r10, r30
 986:	b6 01       	movw	r22, r12
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 98e:	21 10       	cpse	r2, r1
 990:	2a 94       	dec	r2
 992:	21 e0       	ldi	r18, 0x01	; 1
 994:	82 1a       	sub	r8, r18
 996:	91 08       	sbc	r9, r1
 998:	81 14       	cp	r8, r1
 99a:	91 04       	cpc	r9, r1
 99c:	71 f7       	brne	.-36     	; 0x97a <__stack+0x11b>
 99e:	e8 c0       	rjmp	.+464    	; 0xb70 <__stack+0x311>
 9a0:	84 36       	cpi	r24, 0x64	; 100
 9a2:	11 f0       	breq	.+4      	; 0x9a8 <__stack+0x149>
 9a4:	89 36       	cpi	r24, 0x69	; 105
 9a6:	41 f5       	brne	.+80     	; 0x9f8 <__stack+0x199>
 9a8:	f8 01       	movw	r30, r16
 9aa:	37 fe       	sbrs	r3, 7
 9ac:	07 c0       	rjmp	.+14     	; 0x9bc <__stack+0x15d>
 9ae:	60 81       	ld	r22, Z
 9b0:	71 81       	ldd	r23, Z+1	; 0x01
 9b2:	82 81       	ldd	r24, Z+2	; 0x02
 9b4:	93 81       	ldd	r25, Z+3	; 0x03
 9b6:	0c 5f       	subi	r16, 0xFC	; 252
 9b8:	1f 4f       	sbci	r17, 0xFF	; 255
 9ba:	08 c0       	rjmp	.+16     	; 0x9cc <__stack+0x16d>
 9bc:	60 81       	ld	r22, Z
 9be:	71 81       	ldd	r23, Z+1	; 0x01
 9c0:	07 2e       	mov	r0, r23
 9c2:	00 0c       	add	r0, r0
 9c4:	88 0b       	sbc	r24, r24
 9c6:	99 0b       	sbc	r25, r25
 9c8:	0e 5f       	subi	r16, 0xFE	; 254
 9ca:	1f 4f       	sbci	r17, 0xFF	; 255
 9cc:	f3 2d       	mov	r31, r3
 9ce:	ff 76       	andi	r31, 0x6F	; 111
 9d0:	3f 2e       	mov	r3, r31
 9d2:	97 ff       	sbrs	r25, 7
 9d4:	09 c0       	rjmp	.+18     	; 0x9e8 <__stack+0x189>
 9d6:	90 95       	com	r25
 9d8:	80 95       	com	r24
 9da:	70 95       	com	r23
 9dc:	61 95       	neg	r22
 9de:	7f 4f       	sbci	r23, 0xFF	; 255
 9e0:	8f 4f       	sbci	r24, 0xFF	; 255
 9e2:	9f 4f       	sbci	r25, 0xFF	; 255
 9e4:	f0 68       	ori	r31, 0x80	; 128
 9e6:	3f 2e       	mov	r3, r31
 9e8:	2a e0       	ldi	r18, 0x0A	; 10
 9ea:	30 e0       	ldi	r19, 0x00	; 0
 9ec:	a3 01       	movw	r20, r6
 9ee:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__ultoa_invert>
 9f2:	88 2e       	mov	r8, r24
 9f4:	86 18       	sub	r8, r6
 9f6:	45 c0       	rjmp	.+138    	; 0xa82 <__stack+0x223>
 9f8:	85 37       	cpi	r24, 0x75	; 117
 9fa:	31 f4       	brne	.+12     	; 0xa08 <__stack+0x1a9>
 9fc:	23 2d       	mov	r18, r3
 9fe:	2f 7e       	andi	r18, 0xEF	; 239
 a00:	b2 2e       	mov	r11, r18
 a02:	2a e0       	ldi	r18, 0x0A	; 10
 a04:	30 e0       	ldi	r19, 0x00	; 0
 a06:	25 c0       	rjmp	.+74     	; 0xa52 <__stack+0x1f3>
 a08:	93 2d       	mov	r25, r3
 a0a:	99 7f       	andi	r25, 0xF9	; 249
 a0c:	b9 2e       	mov	r11, r25
 a0e:	8f 36       	cpi	r24, 0x6F	; 111
 a10:	c1 f0       	breq	.+48     	; 0xa42 <__stack+0x1e3>
 a12:	18 f4       	brcc	.+6      	; 0xa1a <__stack+0x1bb>
 a14:	88 35       	cpi	r24, 0x58	; 88
 a16:	79 f0       	breq	.+30     	; 0xa36 <__stack+0x1d7>
 a18:	b5 c0       	rjmp	.+362    	; 0xb84 <__stack+0x325>
 a1a:	80 37       	cpi	r24, 0x70	; 112
 a1c:	19 f0       	breq	.+6      	; 0xa24 <__stack+0x1c5>
 a1e:	88 37       	cpi	r24, 0x78	; 120
 a20:	21 f0       	breq	.+8      	; 0xa2a <__stack+0x1cb>
 a22:	b0 c0       	rjmp	.+352    	; 0xb84 <__stack+0x325>
 a24:	e9 2f       	mov	r30, r25
 a26:	e0 61       	ori	r30, 0x10	; 16
 a28:	be 2e       	mov	r11, r30
 a2a:	b4 fe       	sbrs	r11, 4
 a2c:	0d c0       	rjmp	.+26     	; 0xa48 <__stack+0x1e9>
 a2e:	fb 2d       	mov	r31, r11
 a30:	f4 60       	ori	r31, 0x04	; 4
 a32:	bf 2e       	mov	r11, r31
 a34:	09 c0       	rjmp	.+18     	; 0xa48 <__stack+0x1e9>
 a36:	34 fe       	sbrs	r3, 4
 a38:	0a c0       	rjmp	.+20     	; 0xa4e <__stack+0x1ef>
 a3a:	29 2f       	mov	r18, r25
 a3c:	26 60       	ori	r18, 0x06	; 6
 a3e:	b2 2e       	mov	r11, r18
 a40:	06 c0       	rjmp	.+12     	; 0xa4e <__stack+0x1ef>
 a42:	28 e0       	ldi	r18, 0x08	; 8
 a44:	30 e0       	ldi	r19, 0x00	; 0
 a46:	05 c0       	rjmp	.+10     	; 0xa52 <__stack+0x1f3>
 a48:	20 e1       	ldi	r18, 0x10	; 16
 a4a:	30 e0       	ldi	r19, 0x00	; 0
 a4c:	02 c0       	rjmp	.+4      	; 0xa52 <__stack+0x1f3>
 a4e:	20 e1       	ldi	r18, 0x10	; 16
 a50:	32 e0       	ldi	r19, 0x02	; 2
 a52:	f8 01       	movw	r30, r16
 a54:	b7 fe       	sbrs	r11, 7
 a56:	07 c0       	rjmp	.+14     	; 0xa66 <__stack+0x207>
 a58:	60 81       	ld	r22, Z
 a5a:	71 81       	ldd	r23, Z+1	; 0x01
 a5c:	82 81       	ldd	r24, Z+2	; 0x02
 a5e:	93 81       	ldd	r25, Z+3	; 0x03
 a60:	0c 5f       	subi	r16, 0xFC	; 252
 a62:	1f 4f       	sbci	r17, 0xFF	; 255
 a64:	06 c0       	rjmp	.+12     	; 0xa72 <__stack+0x213>
 a66:	60 81       	ld	r22, Z
 a68:	71 81       	ldd	r23, Z+1	; 0x01
 a6a:	80 e0       	ldi	r24, 0x00	; 0
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	0e 5f       	subi	r16, 0xFE	; 254
 a70:	1f 4f       	sbci	r17, 0xFF	; 255
 a72:	a3 01       	movw	r20, r6
 a74:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__ultoa_invert>
 a78:	88 2e       	mov	r8, r24
 a7a:	86 18       	sub	r8, r6
 a7c:	fb 2d       	mov	r31, r11
 a7e:	ff 77       	andi	r31, 0x7F	; 127
 a80:	3f 2e       	mov	r3, r31
 a82:	36 fe       	sbrs	r3, 6
 a84:	0d c0       	rjmp	.+26     	; 0xaa0 <__stack+0x241>
 a86:	23 2d       	mov	r18, r3
 a88:	2e 7f       	andi	r18, 0xFE	; 254
 a8a:	a2 2e       	mov	r10, r18
 a8c:	89 14       	cp	r8, r9
 a8e:	58 f4       	brcc	.+22     	; 0xaa6 <__stack+0x247>
 a90:	34 fe       	sbrs	r3, 4
 a92:	0b c0       	rjmp	.+22     	; 0xaaa <__stack+0x24b>
 a94:	32 fc       	sbrc	r3, 2
 a96:	09 c0       	rjmp	.+18     	; 0xaaa <__stack+0x24b>
 a98:	83 2d       	mov	r24, r3
 a9a:	8e 7e       	andi	r24, 0xEE	; 238
 a9c:	a8 2e       	mov	r10, r24
 a9e:	05 c0       	rjmp	.+10     	; 0xaaa <__stack+0x24b>
 aa0:	b8 2c       	mov	r11, r8
 aa2:	a3 2c       	mov	r10, r3
 aa4:	03 c0       	rjmp	.+6      	; 0xaac <__stack+0x24d>
 aa6:	b8 2c       	mov	r11, r8
 aa8:	01 c0       	rjmp	.+2      	; 0xaac <__stack+0x24d>
 aaa:	b9 2c       	mov	r11, r9
 aac:	a4 fe       	sbrs	r10, 4
 aae:	0f c0       	rjmp	.+30     	; 0xace <__stack+0x26f>
 ab0:	fe 01       	movw	r30, r28
 ab2:	e8 0d       	add	r30, r8
 ab4:	f1 1d       	adc	r31, r1
 ab6:	80 81       	ld	r24, Z
 ab8:	80 33       	cpi	r24, 0x30	; 48
 aba:	21 f4       	brne	.+8      	; 0xac4 <__stack+0x265>
 abc:	9a 2d       	mov	r25, r10
 abe:	99 7e       	andi	r25, 0xE9	; 233
 ac0:	a9 2e       	mov	r10, r25
 ac2:	09 c0       	rjmp	.+18     	; 0xad6 <__stack+0x277>
 ac4:	a2 fe       	sbrs	r10, 2
 ac6:	06 c0       	rjmp	.+12     	; 0xad4 <__stack+0x275>
 ac8:	b3 94       	inc	r11
 aca:	b3 94       	inc	r11
 acc:	04 c0       	rjmp	.+8      	; 0xad6 <__stack+0x277>
 ace:	8a 2d       	mov	r24, r10
 ad0:	86 78       	andi	r24, 0x86	; 134
 ad2:	09 f0       	breq	.+2      	; 0xad6 <__stack+0x277>
 ad4:	b3 94       	inc	r11
 ad6:	a3 fc       	sbrc	r10, 3
 ad8:	11 c0       	rjmp	.+34     	; 0xafc <__stack+0x29d>
 ada:	a0 fe       	sbrs	r10, 0
 adc:	06 c0       	rjmp	.+12     	; 0xaea <__stack+0x28b>
 ade:	b2 14       	cp	r11, r2
 ae0:	88 f4       	brcc	.+34     	; 0xb04 <__stack+0x2a5>
 ae2:	28 0c       	add	r2, r8
 ae4:	92 2c       	mov	r9, r2
 ae6:	9b 18       	sub	r9, r11
 ae8:	0e c0       	rjmp	.+28     	; 0xb06 <__stack+0x2a7>
 aea:	b2 14       	cp	r11, r2
 aec:	60 f4       	brcc	.+24     	; 0xb06 <__stack+0x2a7>
 aee:	b6 01       	movw	r22, r12
 af0:	80 e2       	ldi	r24, 0x20	; 32
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 af8:	b3 94       	inc	r11
 afa:	f7 cf       	rjmp	.-18     	; 0xaea <__stack+0x28b>
 afc:	b2 14       	cp	r11, r2
 afe:	18 f4       	brcc	.+6      	; 0xb06 <__stack+0x2a7>
 b00:	2b 18       	sub	r2, r11
 b02:	02 c0       	rjmp	.+4      	; 0xb08 <__stack+0x2a9>
 b04:	98 2c       	mov	r9, r8
 b06:	21 2c       	mov	r2, r1
 b08:	a4 fe       	sbrs	r10, 4
 b0a:	10 c0       	rjmp	.+32     	; 0xb2c <__stack+0x2cd>
 b0c:	b6 01       	movw	r22, r12
 b0e:	80 e3       	ldi	r24, 0x30	; 48
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 b16:	a2 fe       	sbrs	r10, 2
 b18:	17 c0       	rjmp	.+46     	; 0xb48 <__stack+0x2e9>
 b1a:	a1 fc       	sbrc	r10, 1
 b1c:	03 c0       	rjmp	.+6      	; 0xb24 <__stack+0x2c5>
 b1e:	88 e7       	ldi	r24, 0x78	; 120
 b20:	90 e0       	ldi	r25, 0x00	; 0
 b22:	02 c0       	rjmp	.+4      	; 0xb28 <__stack+0x2c9>
 b24:	88 e5       	ldi	r24, 0x58	; 88
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	b6 01       	movw	r22, r12
 b2a:	0c c0       	rjmp	.+24     	; 0xb44 <__stack+0x2e5>
 b2c:	8a 2d       	mov	r24, r10
 b2e:	86 78       	andi	r24, 0x86	; 134
 b30:	59 f0       	breq	.+22     	; 0xb48 <__stack+0x2e9>
 b32:	a1 fe       	sbrs	r10, 1
 b34:	02 c0       	rjmp	.+4      	; 0xb3a <__stack+0x2db>
 b36:	8b e2       	ldi	r24, 0x2B	; 43
 b38:	01 c0       	rjmp	.+2      	; 0xb3c <__stack+0x2dd>
 b3a:	80 e2       	ldi	r24, 0x20	; 32
 b3c:	a7 fc       	sbrc	r10, 7
 b3e:	8d e2       	ldi	r24, 0x2D	; 45
 b40:	b6 01       	movw	r22, r12
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 b48:	89 14       	cp	r8, r9
 b4a:	38 f4       	brcc	.+14     	; 0xb5a <__stack+0x2fb>
 b4c:	b6 01       	movw	r22, r12
 b4e:	80 e3       	ldi	r24, 0x30	; 48
 b50:	90 e0       	ldi	r25, 0x00	; 0
 b52:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 b56:	9a 94       	dec	r9
 b58:	f7 cf       	rjmp	.-18     	; 0xb48 <__stack+0x2e9>
 b5a:	8a 94       	dec	r8
 b5c:	f3 01       	movw	r30, r6
 b5e:	e8 0d       	add	r30, r8
 b60:	f1 1d       	adc	r31, r1
 b62:	80 81       	ld	r24, Z
 b64:	b6 01       	movw	r22, r12
 b66:	90 e0       	ldi	r25, 0x00	; 0
 b68:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 b6c:	81 10       	cpse	r8, r1
 b6e:	f5 cf       	rjmp	.-22     	; 0xb5a <__stack+0x2fb>
 b70:	22 20       	and	r2, r2
 b72:	09 f4       	brne	.+2      	; 0xb76 <__stack+0x317>
 b74:	42 ce       	rjmp	.-892    	; 0x7fa <vfprintf+0x24>
 b76:	b6 01       	movw	r22, r12
 b78:	80 e2       	ldi	r24, 0x20	; 32
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <fputc>
 b80:	2a 94       	dec	r2
 b82:	f6 cf       	rjmp	.-20     	; 0xb70 <__stack+0x311>
 b84:	f6 01       	movw	r30, r12
 b86:	86 81       	ldd	r24, Z+6	; 0x06
 b88:	97 81       	ldd	r25, Z+7	; 0x07
 b8a:	02 c0       	rjmp	.+4      	; 0xb90 <__stack+0x331>
 b8c:	8f ef       	ldi	r24, 0xFF	; 255
 b8e:	9f ef       	ldi	r25, 0xFF	; 255
 b90:	2b 96       	adiw	r28, 0x0b	; 11
 b92:	e2 e1       	ldi	r30, 0x12	; 18
 b94:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__epilogue_restores__>

00000b98 <strnlen_P>:
 b98:	fc 01       	movw	r30, r24
 b9a:	05 90       	lpm	r0, Z+
 b9c:	61 50       	subi	r22, 0x01	; 1
 b9e:	70 40       	sbci	r23, 0x00	; 0
 ba0:	01 10       	cpse	r0, r1
 ba2:	d8 f7       	brcc	.-10     	; 0xb9a <strnlen_P+0x2>
 ba4:	80 95       	com	r24
 ba6:	90 95       	com	r25
 ba8:	8e 0f       	add	r24, r30
 baa:	9f 1f       	adc	r25, r31
 bac:	08 95       	ret

00000bae <strnlen>:
 bae:	fc 01       	movw	r30, r24
 bb0:	61 50       	subi	r22, 0x01	; 1
 bb2:	70 40       	sbci	r23, 0x00	; 0
 bb4:	01 90       	ld	r0, Z+
 bb6:	01 10       	cpse	r0, r1
 bb8:	d8 f7       	brcc	.-10     	; 0xbb0 <strnlen+0x2>
 bba:	80 95       	com	r24
 bbc:	90 95       	com	r25
 bbe:	8e 0f       	add	r24, r30
 bc0:	9f 1f       	adc	r25, r31
 bc2:	08 95       	ret

00000bc4 <fputc>:
 bc4:	0f 93       	push	r16
 bc6:	1f 93       	push	r17
 bc8:	cf 93       	push	r28
 bca:	df 93       	push	r29
 bcc:	fb 01       	movw	r30, r22
 bce:	23 81       	ldd	r18, Z+3	; 0x03
 bd0:	21 fd       	sbrc	r18, 1
 bd2:	03 c0       	rjmp	.+6      	; 0xbda <fputc+0x16>
 bd4:	8f ef       	ldi	r24, 0xFF	; 255
 bd6:	9f ef       	ldi	r25, 0xFF	; 255
 bd8:	2c c0       	rjmp	.+88     	; 0xc32 <fputc+0x6e>
 bda:	22 ff       	sbrs	r18, 2
 bdc:	16 c0       	rjmp	.+44     	; 0xc0a <fputc+0x46>
 bde:	46 81       	ldd	r20, Z+6	; 0x06
 be0:	57 81       	ldd	r21, Z+7	; 0x07
 be2:	24 81       	ldd	r18, Z+4	; 0x04
 be4:	35 81       	ldd	r19, Z+5	; 0x05
 be6:	42 17       	cp	r20, r18
 be8:	53 07       	cpc	r21, r19
 bea:	44 f4       	brge	.+16     	; 0xbfc <fputc+0x38>
 bec:	a0 81       	ld	r26, Z
 bee:	b1 81       	ldd	r27, Z+1	; 0x01
 bf0:	9d 01       	movw	r18, r26
 bf2:	2f 5f       	subi	r18, 0xFF	; 255
 bf4:	3f 4f       	sbci	r19, 0xFF	; 255
 bf6:	31 83       	std	Z+1, r19	; 0x01
 bf8:	20 83       	st	Z, r18
 bfa:	8c 93       	st	X, r24
 bfc:	26 81       	ldd	r18, Z+6	; 0x06
 bfe:	37 81       	ldd	r19, Z+7	; 0x07
 c00:	2f 5f       	subi	r18, 0xFF	; 255
 c02:	3f 4f       	sbci	r19, 0xFF	; 255
 c04:	37 83       	std	Z+7, r19	; 0x07
 c06:	26 83       	std	Z+6, r18	; 0x06
 c08:	14 c0       	rjmp	.+40     	; 0xc32 <fputc+0x6e>
 c0a:	8b 01       	movw	r16, r22
 c0c:	ec 01       	movw	r28, r24
 c0e:	fb 01       	movw	r30, r22
 c10:	00 84       	ldd	r0, Z+8	; 0x08
 c12:	f1 85       	ldd	r31, Z+9	; 0x09
 c14:	e0 2d       	mov	r30, r0
 c16:	09 95       	icall
 c18:	89 2b       	or	r24, r25
 c1a:	e1 f6       	brne	.-72     	; 0xbd4 <fputc+0x10>
 c1c:	d8 01       	movw	r26, r16
 c1e:	16 96       	adiw	r26, 0x06	; 6
 c20:	8d 91       	ld	r24, X+
 c22:	9c 91       	ld	r25, X
 c24:	17 97       	sbiw	r26, 0x07	; 7
 c26:	01 96       	adiw	r24, 0x01	; 1
 c28:	17 96       	adiw	r26, 0x07	; 7
 c2a:	9c 93       	st	X, r25
 c2c:	8e 93       	st	-X, r24
 c2e:	16 97       	sbiw	r26, 0x06	; 6
 c30:	ce 01       	movw	r24, r28
 c32:	df 91       	pop	r29
 c34:	cf 91       	pop	r28
 c36:	1f 91       	pop	r17
 c38:	0f 91       	pop	r16
 c3a:	08 95       	ret

00000c3c <__ultoa_invert>:
 c3c:	fa 01       	movw	r30, r20
 c3e:	aa 27       	eor	r26, r26
 c40:	28 30       	cpi	r18, 0x08	; 8
 c42:	51 f1       	breq	.+84     	; 0xc98 <__ultoa_invert+0x5c>
 c44:	20 31       	cpi	r18, 0x10	; 16
 c46:	81 f1       	breq	.+96     	; 0xca8 <__ultoa_invert+0x6c>
 c48:	e8 94       	clt
 c4a:	6f 93       	push	r22
 c4c:	6e 7f       	andi	r22, 0xFE	; 254
 c4e:	6e 5f       	subi	r22, 0xFE	; 254
 c50:	7f 4f       	sbci	r23, 0xFF	; 255
 c52:	8f 4f       	sbci	r24, 0xFF	; 255
 c54:	9f 4f       	sbci	r25, 0xFF	; 255
 c56:	af 4f       	sbci	r26, 0xFF	; 255
 c58:	b1 e0       	ldi	r27, 0x01	; 1
 c5a:	3e d0       	rcall	.+124    	; 0xcd8 <__ultoa_invert+0x9c>
 c5c:	b4 e0       	ldi	r27, 0x04	; 4
 c5e:	3c d0       	rcall	.+120    	; 0xcd8 <__ultoa_invert+0x9c>
 c60:	67 0f       	add	r22, r23
 c62:	78 1f       	adc	r23, r24
 c64:	89 1f       	adc	r24, r25
 c66:	9a 1f       	adc	r25, r26
 c68:	a1 1d       	adc	r26, r1
 c6a:	68 0f       	add	r22, r24
 c6c:	79 1f       	adc	r23, r25
 c6e:	8a 1f       	adc	r24, r26
 c70:	91 1d       	adc	r25, r1
 c72:	a1 1d       	adc	r26, r1
 c74:	6a 0f       	add	r22, r26
 c76:	71 1d       	adc	r23, r1
 c78:	81 1d       	adc	r24, r1
 c7a:	91 1d       	adc	r25, r1
 c7c:	a1 1d       	adc	r26, r1
 c7e:	20 d0       	rcall	.+64     	; 0xcc0 <__ultoa_invert+0x84>
 c80:	09 f4       	brne	.+2      	; 0xc84 <__ultoa_invert+0x48>
 c82:	68 94       	set
 c84:	3f 91       	pop	r19
 c86:	2a e0       	ldi	r18, 0x0A	; 10
 c88:	26 9f       	mul	r18, r22
 c8a:	11 24       	eor	r1, r1
 c8c:	30 19       	sub	r19, r0
 c8e:	30 5d       	subi	r19, 0xD0	; 208
 c90:	31 93       	st	Z+, r19
 c92:	de f6       	brtc	.-74     	; 0xc4a <__ultoa_invert+0xe>
 c94:	cf 01       	movw	r24, r30
 c96:	08 95       	ret
 c98:	46 2f       	mov	r20, r22
 c9a:	47 70       	andi	r20, 0x07	; 7
 c9c:	40 5d       	subi	r20, 0xD0	; 208
 c9e:	41 93       	st	Z+, r20
 ca0:	b3 e0       	ldi	r27, 0x03	; 3
 ca2:	0f d0       	rcall	.+30     	; 0xcc2 <__ultoa_invert+0x86>
 ca4:	c9 f7       	brne	.-14     	; 0xc98 <__ultoa_invert+0x5c>
 ca6:	f6 cf       	rjmp	.-20     	; 0xc94 <__ultoa_invert+0x58>
 ca8:	46 2f       	mov	r20, r22
 caa:	4f 70       	andi	r20, 0x0F	; 15
 cac:	40 5d       	subi	r20, 0xD0	; 208
 cae:	4a 33       	cpi	r20, 0x3A	; 58
 cb0:	18 f0       	brcs	.+6      	; 0xcb8 <__ultoa_invert+0x7c>
 cb2:	49 5d       	subi	r20, 0xD9	; 217
 cb4:	31 fd       	sbrc	r19, 1
 cb6:	40 52       	subi	r20, 0x20	; 32
 cb8:	41 93       	st	Z+, r20
 cba:	02 d0       	rcall	.+4      	; 0xcc0 <__ultoa_invert+0x84>
 cbc:	a9 f7       	brne	.-22     	; 0xca8 <__ultoa_invert+0x6c>
 cbe:	ea cf       	rjmp	.-44     	; 0xc94 <__ultoa_invert+0x58>
 cc0:	b4 e0       	ldi	r27, 0x04	; 4
 cc2:	a6 95       	lsr	r26
 cc4:	97 95       	ror	r25
 cc6:	87 95       	ror	r24
 cc8:	77 95       	ror	r23
 cca:	67 95       	ror	r22
 ccc:	ba 95       	dec	r27
 cce:	c9 f7       	brne	.-14     	; 0xcc2 <__ultoa_invert+0x86>
 cd0:	00 97       	sbiw	r24, 0x00	; 0
 cd2:	61 05       	cpc	r22, r1
 cd4:	71 05       	cpc	r23, r1
 cd6:	08 95       	ret
 cd8:	9b 01       	movw	r18, r22
 cda:	ac 01       	movw	r20, r24
 cdc:	0a 2e       	mov	r0, r26
 cde:	06 94       	lsr	r0
 ce0:	57 95       	ror	r21
 ce2:	47 95       	ror	r20
 ce4:	37 95       	ror	r19
 ce6:	27 95       	ror	r18
 ce8:	ba 95       	dec	r27
 cea:	c9 f7       	brne	.-14     	; 0xcde <__ultoa_invert+0xa2>
 cec:	62 0f       	add	r22, r18
 cee:	73 1f       	adc	r23, r19
 cf0:	84 1f       	adc	r24, r20
 cf2:	95 1f       	adc	r25, r21
 cf4:	a0 1d       	adc	r26, r0
 cf6:	08 95       	ret

00000cf8 <__prologue_saves__>:
 cf8:	2f 92       	push	r2
 cfa:	3f 92       	push	r3
 cfc:	4f 92       	push	r4
 cfe:	5f 92       	push	r5
 d00:	6f 92       	push	r6
 d02:	7f 92       	push	r7
 d04:	8f 92       	push	r8
 d06:	9f 92       	push	r9
 d08:	af 92       	push	r10
 d0a:	bf 92       	push	r11
 d0c:	cf 92       	push	r12
 d0e:	df 92       	push	r13
 d10:	ef 92       	push	r14
 d12:	ff 92       	push	r15
 d14:	0f 93       	push	r16
 d16:	1f 93       	push	r17
 d18:	cf 93       	push	r28
 d1a:	df 93       	push	r29
 d1c:	cd b7       	in	r28, 0x3d	; 61
 d1e:	de b7       	in	r29, 0x3e	; 62
 d20:	ca 1b       	sub	r28, r26
 d22:	db 0b       	sbc	r29, r27
 d24:	0f b6       	in	r0, 0x3f	; 63
 d26:	f8 94       	cli
 d28:	de bf       	out	0x3e, r29	; 62
 d2a:	0f be       	out	0x3f, r0	; 63
 d2c:	cd bf       	out	0x3d, r28	; 61
 d2e:	09 94       	ijmp

00000d30 <__epilogue_restores__>:
 d30:	2a 88       	ldd	r2, Y+18	; 0x12
 d32:	39 88       	ldd	r3, Y+17	; 0x11
 d34:	48 88       	ldd	r4, Y+16	; 0x10
 d36:	5f 84       	ldd	r5, Y+15	; 0x0f
 d38:	6e 84       	ldd	r6, Y+14	; 0x0e
 d3a:	7d 84       	ldd	r7, Y+13	; 0x0d
 d3c:	8c 84       	ldd	r8, Y+12	; 0x0c
 d3e:	9b 84       	ldd	r9, Y+11	; 0x0b
 d40:	aa 84       	ldd	r10, Y+10	; 0x0a
 d42:	b9 84       	ldd	r11, Y+9	; 0x09
 d44:	c8 84       	ldd	r12, Y+8	; 0x08
 d46:	df 80       	ldd	r13, Y+7	; 0x07
 d48:	ee 80       	ldd	r14, Y+6	; 0x06
 d4a:	fd 80       	ldd	r15, Y+5	; 0x05
 d4c:	0c 81       	ldd	r16, Y+4	; 0x04
 d4e:	1b 81       	ldd	r17, Y+3	; 0x03
 d50:	aa 81       	ldd	r26, Y+2	; 0x02
 d52:	b9 81       	ldd	r27, Y+1	; 0x01
 d54:	ce 0f       	add	r28, r30
 d56:	d1 1d       	adc	r29, r1
 d58:	0f b6       	in	r0, 0x3f	; 63
 d5a:	f8 94       	cli
 d5c:	de bf       	out	0x3e, r29	; 62
 d5e:	0f be       	out	0x3f, r0	; 63
 d60:	cd bf       	out	0x3d, r28	; 61
 d62:	ed 01       	movw	r28, r26
 d64:	08 95       	ret

00000d66 <_exit>:
 d66:	f8 94       	cli

00000d68 <__stop_program>:
 d68:	ff cf       	rjmp	.-2      	; 0xd68 <__stop_program>
